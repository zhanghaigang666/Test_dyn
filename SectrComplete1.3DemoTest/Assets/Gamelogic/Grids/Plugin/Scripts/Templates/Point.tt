//----------------------------------------------//
// Gamelogic Grids                              //
// http://www.gamelogic.co.za                   //
// Copyright (c) 2013 Gamelogic (Pty) Ltd       //
//----------------------------------------------//

// Auto-generated File

namespace Gamelogic.Grids
{
<# 
	foreach(var name in UniformGrids)  
	{
		string Operator = name + "Op";
		string Point = name + "Point";
		string ParallelogramWrapper = name + "ParallelogramWrapper"; 
		string HorizontalWrapper = name + "HorizontalWrapper"; 
		string VerticalWrapper = name + "VerticalWrapper"; 
		
#>
	public partial struct <#=Point#>
	{
		#region Constants

		/// <summary>
		/// The zero point (0, 0).
		/// </summary>
		public static readonly <#=Point#> Zero = new <#=Point#>(0, 0);

		#endregion

		#region Fields

		//private readonly VectorPoint vector;
		private readonly int x;
		private readonly int y;

		#endregion

		#region Properties

		/// <summary>
		/// The x-coordinate of this point. This need to be in XML
		/// </summary>
		public int X
		{
			get
			{
				return x;
			}
		}

		/// <summary>
		/// The y-coordinate of this point.
		/// </summary>
		public int Y
		{
			get
			{
				return y;
			}
		}

		public int SpliceIndex
		{
			get 
			{
				return 0;
			}
		}

		public int SpliceCount
		{	
			get 
			{
				return 1; 
			}
		}

		/// <summary>
		/// A Uniform point's base point is simply the point itself.
		///	Makes it easier to implement generic algorithms.
		/// Since version 1.1
		/// </summary>
		public <#=Point#> BasePoint
		{
			get
			{
				return this;
			}
		}
		#endregion

		#region Construction

		/// <summary>
		/// Constructs a new <#=Point#> with the given coordinates.
		/// </summary>
		public <#=Point#>(int x, int y):
			this(new VectorPoint(x, y))
		{
		}

		/// <summary>
		/// Constructs a new <#=Point#> with the same coordinates as the given VectorPoint.
		/// </summary>
		private <#=Point#>(VectorPoint vector)
		{
			x = vector.X;
			y = vector.Y;
		}
		#endregion

		#region Distance

		/// <summary>
		/// The lattice distance from this point to the other.
		/// </summary>
		public int DistanceFrom(<#=Point#> other)
		{
			return Subtract(other).Magnitude();
		}

		#endregion

		#region Equality
		public bool Equals(<#=Point#> other)
		{
			bool areEqual = (x == other.X) && (y == other.Y);
			return areEqual;
		}

		public override bool Equals (object other)
		{
			if(other.GetType() != typeof(<#=Point#>))
			{
				return false;
			}

			var point = (<#=Point#>) other;
			return Equals(point);
		}
	
		public override int GetHashCode ()
		{
			return x ^ y;
		}	
		#endregion

		#region Arithmetic

		/// <summary>
		/// This is a norm defined on the point, such that `p1.Difference(p2).Abs()` is equal to 
		///	`p1.DistanceFrom(p2)`.
		/// </summary>
		public <#=Point#> Translate(<#=Point#> translation)
		{
			return new <#=Point#>(x + translation.X, y + translation.Y);
		}

		public <#=Point#> Negate()
		{
			return new <#=Point#>(-x, -y);
		}

		public <#=Point#> ScaleDown(int r)
		{
			return new <#=Point#>(GLMathf.Div(x, r), GLMathf.Div(y, r));
		}

		public <#=Point#> ScaleUp(int r)
		{
			return new <#=Point#>(x * r, y * r);
		}

		/// <summary>
		/// Subtracts the other point from this point, and returns the result.
		/// </summary>
		public <#=Point#> Subtract(<#=Point#> other)
		{
			return new <#=Point#>(x - other.X, y - other.Y);
		}

		public <#=Point#> MoveBy(<#=Point#> translation)
		{
			return Translate(translation);
		}

		public <#=Point#> MoveBackBy(<#=Point#> translation)
		{
			return Translate(translation.Negate());
		}

		[Version(1,7)]
		public int Dot(<#=Point#> other)
		{
			return x * other.X + y * other.Y;
		}

		[Version(1,7)]
		public int PerpDot(<#=Point#> other)
		{
			return x * other.Y - y * other.x;
		}

		[Version(1,10)]
		public <#=Point#> Perp()
		{
			return new <#=Point#>(-y, x);
		}

		/// <summary>
		/// Gives a new point that represents the 
		///	reminder when the first point is divided
		///	by the second point	component-wise. The
		///	division is integer division.
		///
		///	Since version 1.6 (Rect)
		///	Since version 1.7 (other)
		/// </summary>
		public <#=Point#> Mod(<#=Point#> otherPoint)
		{
			var x = GLMathf.Mod(X, otherPoint.X);
			var y = GLMathf.Mod(Y, otherPoint.Y);

			return new <#=Point#>(x, y);
		}

		/// <summary>
		/// Gives a new point that represents the 
		///	first point divided by the second point
		///	component-wise. The division is integer
		///	division.
		///
		///	Since version 1.6 (Rect)
		///	Since version 1.7 (other)
		/// </summary>
		public <#=Point#> Div(<#=Point#> otherPoint)
		{
			var x = GLMathf.Div(X, otherPoint.X);
			var y = GLMathf.Div(Y, otherPoint.Y);

			return new <#=Point#>(x, y);
		}

		/// <summary>
		/// Gives a new point that represents the 
		///	first point multiplied by the second point
		///	component-wise. 
		///
		///	Since version 1.6 (Rect)
		///	Since version 1.7 (other)
		/// </summary>
		public <#=Point#> Mul(<#=Point#> otherPoint)
		{
			var x = X * otherPoint.X;
			var y = Y * otherPoint.Y;

			return new <#=Point#>(x, y);
		}
		#endregion 

		#region Utility
		override public string ToString()
		{
			return "(" + x + ", " + y + ")";
		}
		#endregion

		#region Operators
		public static bool operator ==(<#=Point#> point1, <#=Point#> point2)
		{
			return point1.Equals(point2);
		}

		public static bool operator !=(<#=Point#> point1, <#=Point#> point2)
		{
			return !point1.Equals(point2);
		}

		public static <#=Point#> operator +(<#=Point#> point)
		{
			return point;
		}

		public static <#=Point#> operator -(<#=Point#> point)
		{
			return point.Negate();
		}

		public static <#=Point#> operator +(<#=Point#> point1, <#=Point#> point2)
		{
			return point1.Translate(point2);
		}

		public static <#=Point#> operator -(<#=Point#> point1, <#=Point#> point2)
		{
			return point1.Subtract(point2);
		}

		public static <#=Point#> operator *(<#=Point#> point, int n)
		{
			return point.ScaleUp(n);
		}

		public static <#=Point#> operator /(<#=Point#> point, int n)
		{
			return point.ScaleDown(n);
		}

		public static <#=Point#> operator *(<#=Point#> point1, <#=Point#> point2)
		{
			return point1.Mul(point2);
		}

		public static <#=Point#> operator /(<#=Point#> point1, <#=Point#> point2)
		{
			return point1.Div(point2);
		}

		public static <#=Point#> operator %(<#=Point#> point1, <#=Point#> point2)
		{
			return point1.Mod(point2);
		}

		#endregion

		#region Colorings

		/// <summary>
		/// Gives a coloring of the grid such that 
		///	if a point p has color k, then all points
		///	p + m[ux, 0] + n[vx, vy] have the same color
		///	for any integers a and b.
		///
		///	More information anout grid colorings:
		///	http://gamelogic.co.za/2013/12/18/what-are-grid-colorings/
		///
		///	Since version 1.7
		/// </summary>
		public int __GetColor__ReferenceImplementation(int ux, int vx, int vy)
		{
			var u = new <#=Point#>(ux, 0);
			var v = new <#=Point#>(vx, vy);

			int colorCount = u.PerpDot(v);
			
			float a = PerpDot(v) / (float) colorCount;
			float b = -PerpDot(u) / (float) colorCount;

			int m = GLMathf.FloorToInt(a);
			int n = GLMathf.FloorToInt(b);

			int baseVectorX = m*u.X + n*v.X;
			int baseVectorY = n*u.Y + n*v.Y;
				
			int offsetX = GLMathf.Mod(X - baseVectorX, ux);
			int offsetY = Y - baseVectorY;

			int colorIndex = GLMathf.FloorToInt(offsetX + offsetY * ux);

			return colorIndex;
		}

		/// <summary>
		/// Gives a coloring of the grid such that 
		///	if a point p has color k, then all points
		///	p + m[ux, 0] + n[vx, vy] have the same color
		///	for any integers a and b.
		///
		///	More information anout grid colorings:
		///	http://gamelogic.co.za/2013/12/18/what-are-grid-colorings/
		///
		///	Since version 1.7
		/// </summary>
		public int GetColor(int ux, int vx, int vy)
		{
			int colorCount = ux * vy;

			float a = (x * vy - y * vx) / (float)colorCount;
			float b = (y * ux) / (float)colorCount;

			int m = GLMathf.FloorToInt(a);
			int n = GLMathf.FloorToInt(b);

			int baseVectorX = m * ux + n * vx;
			int baseVectorY = n * vy;

			int offsetX = GLMathf.Mod(X - baseVectorX, ux);
			int offsetY = Y - baseVectorY;

			int colorIndex = GLMathf.FloorToInt(offsetX + offsetY * ux);

			return colorIndex;
		}

		#endregion
	}

	#region Wrappers

	/// <summary>
	/// Wraps points both horizontally and vertically.
	///
	///	Since version 1.7
	/// </summary>
	[Experimental]
	public class <#=ParallelogramWrapper#> : IPointWrapper<<#=Point#>>
	{
		readonly int width;
		readonly int height;

		public <#=ParallelogramWrapper#>(int width, int height)
		{
			this.width = width;
			this.height = height;
		}

		public <#=Point#> Wrap(<#=Point#> point)
		{
			return new <#=Point#>(GLMathf.Mod(point.X, width), GLMathf.Mod(point.Y, height));
		}
	}

	/// <summary>
	/// Wraps points horizontally.
	///
	///	Since version 1.7
	/// </summary>
	[Experimental]
	public class <#=HorizontalWrapper#> : IPointWrapper<<#=Point#>>
	{
		readonly int width;

		public <#=HorizontalWrapper#>(int width)
		{
			this.width = width;
		}

		public <#=Point#> Wrap(<#=Point#> point)
		{
			return new <#=Point#>(GLMathf.Mod(point.X, width), point.Y);
		}
	}

	/// <summary>
	/// Wraps points vertically.
	///
	///	Since version 1.7
	/// </summary>
	[Experimental]
	public class <#=VerticalWrapper#> : IPointWrapper<<#=Point#>>
	{
		readonly int height;

		public <#=VerticalWrapper#>(int height)
		{
			this.height = height;
		}

		public <#=Point#> Wrap(<#=Point#> point)
		{
			return new <#=Point#>(point.X, GLMathf.Mod(point.Y, height));
		}
	}

	#endregion 
<#
	}
#>
}